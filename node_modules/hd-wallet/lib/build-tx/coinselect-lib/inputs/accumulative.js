"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = accumulative;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var utils = _interopRequireWildcard(require("../utils"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// add inputs until we reach or surpass the target value (or deplete)
// worst-case: O(n)
function accumulative(utxos0, outputs, feeRate, options) {
  var feeRateBigInt = utils.bignumberOrNaN(feeRate);
  if (feeRateBigInt.isNaN() || !feeRateBigInt.isInteger()) return {};
  var feeRateNumber = feeRateBigInt.toNumber();
  var bytesAccum = utils.transactionBytes([], outputs);
  var inAccum = new _bignumber["default"](0);
  var inputs = [];
  var outAccum = utils.sumOrNaN(outputs); // split utxos into required and the rest

  var requiredUtxos = [];
  var utxos = [];
  utxos0.forEach(function (u) {
    if (u.required) {
      requiredUtxos.push(u);
      var utxoBytes = utils.inputBytes(u);
      var utxoValue = utils.bignumberOrNaN(u.value);
      bytesAccum += utxoBytes;
      inAccum = inAccum.plus(utxoValue);
      inputs.push(u);
    } else {
      utxos.push(u);
    }
  }); // check if required utxo is enough

  if (requiredUtxos.length > 0) {
    var requiredIsEnough = utils.finalize(requiredUtxos, outputs, feeRateNumber, options);

    if (requiredIsEnough.inputs) {
      return requiredIsEnough;
    }
  } // continue with the rest


  for (var i = 0; i < utxos.length; ++i) {
    var utxo = utxos[i];
    var utxoBytes = utils.inputBytes(utxo);
    var utxoFee = feeRateNumber * utxoBytes;
    var utxoValue = utils.bignumberOrNaN(utxo.value); // skip detrimental input

    if (utxoValue.isNaN() || utxoValue.comparedTo(new _bignumber["default"](utxoFee)) < 0) {
      if (i === utxos.length - 1) {
        var _fee = utils.getFee(feeRateNumber, bytesAccum + utxoBytes, options, outputs);

        return {
          fee: _fee.toString()
        };
      }
    } else {
      bytesAccum += utxoBytes;
      inAccum = inAccum.plus(utxoValue);
      inputs.push(utxo);

      var _fee2 = utils.getFee(feeRateNumber, bytesAccum, options, outputs);

      var outAccumWithFee = outAccum.isNaN() ? new _bignumber["default"](0) : outAccum.plus(_fee2); // go again?

      if (inAccum.comparedTo(outAccumWithFee) >= 0) {
        return utils.finalize(inputs, outputs, feeRateNumber, options);
      }
    }
  }

  var fee = utils.getFee(feeRateNumber, bytesAccum, options, outputs);
  return {
    fee: fee.toString()
  };
}