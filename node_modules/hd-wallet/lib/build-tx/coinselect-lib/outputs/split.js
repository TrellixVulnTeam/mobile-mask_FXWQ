"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = split;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var utils = _interopRequireWildcard(require("../utils"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function filterCoinbase(utxos, minConfCoinbase) {
  return utxos.filter(function (utxo) {
    if (utxo.coinbase) {
      return utxo.confirmations >= minConfCoinbase;
    }

    return true;
  });
} // split utxos between each output, ignores outputs with .value defined


function split(utxosOrig, outputs, feeRate, options) {
  var coinbase = options.coinbase || 100;
  var feeRateBigInt = utils.bignumberOrNaN(feeRate);
  if (feeRateBigInt.isNaN() || !feeRateBigInt.isInteger()) return {};
  var feeRateNumber = feeRateBigInt.toNumber();
  var utxos = filterCoinbase(utxosOrig, coinbase);
  var bytesAccum = utils.transactionBytes(utxos, outputs);
  var fee = utils.getFee(feeRateNumber, bytesAccum, options, outputs);
  var FEE_RESPONSE = {
    fee: fee.toString()
  };
  if (outputs.length === 0) return FEE_RESPONSE;
  var inAccum = utils.sumOrNaN(utxos);
  if (inAccum.isNaN()) return FEE_RESPONSE;
  var outAccum = utils.sumOrNaN(outputs, true);
  var remaining = inAccum.minus(outAccum).minus(new _bignumber["default"](fee));
  if (remaining.comparedTo(new _bignumber["default"](0)) < 0) return FEE_RESPONSE;
  var unspecified = outputs.reduce(function (a, x) {
    return a + (utils.bignumberOrNaN(x.value).isNaN() ? 1 : 0);
  }, 0);

  if (remaining.toString() === '0' && unspecified === 0) {
    return utils.finalize(utxos, outputs, feeRateNumber, options);
  } // this is the same as "unspecified"
  // const splitOutputsCount = outputs.reduce((a, x) => a + !Number.isFinite(x.value), 0);


  var splitValue = remaining.div(new _bignumber["default"](unspecified));
  var dustThreshold = utils.dustThreshold(feeRateNumber, options.inputLength, options.changeOutputLength, options.dustThreshold); // ensure every output is either user defined, or over the threshold

  if (unspecified && splitValue.lte(dustThreshold)) return FEE_RESPONSE; // assign splitValue to outputs not user defined

  var outputsSplit = outputs.map(function (x) {
    if (x.value !== undefined) return x; // not user defined, but still copy over any non-value fields

    var y = {};
    Object.keys(x).forEach(function (k) {
      y[k] = x[k];
    });
    y.value = splitValue.toString();
    return y;
  });
  return utils.finalize(utxos, outputsSplit, feeRateNumber, options);
}