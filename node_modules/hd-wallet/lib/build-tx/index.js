"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildTx = buildTx;
Object.defineProperty(exports, "BuildTxRequest", {
  enumerable: true,
  get: function get() {
    return request.Request;
  }
});
Object.defineProperty(exports, "BuildTxOutputRequest", {
  enumerable: true,
  get: function get() {
    return request.OutputRequest;
  }
});
Object.defineProperty(exports, "BuildTxEmptyResult", {
  enumerable: true,
  get: function get() {
    return result.empty;
  }
});
Object.defineProperty(exports, "BuildTxResult", {
  enumerable: true,
  get: function get() {
    return result.Result;
  }
});
Object.defineProperty(exports, "BuildTxTransaction", {
  enumerable: true,
  get: function get() {
    return transaction.Transaction;
  }
});
Object.defineProperty(exports, "BuildTxOutput", {
  enumerable: true,
  get: function get() {
    return transaction.Output;
  }
});
Object.defineProperty(exports, "BuildTxInput", {
  enumerable: true,
  get: function get() {
    return transaction.Input;
  }
});

var request = _interopRequireWildcard(require("./request"));

var result = _interopRequireWildcard(require("./result"));

var transaction = _interopRequireWildcard(require("./transaction"));

var coinselect = _interopRequireWildcard(require("./coinselect"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function buildTx(_ref) {
  var utxos = _ref.utxos,
      outputs = _ref.outputs,
      height = _ref.height,
      feeRate = _ref.feeRate,
      segwit = _ref.segwit,
      inputAmounts = _ref.inputAmounts,
      basePath = _ref.basePath,
      network = _ref.network,
      changeId = _ref.changeId,
      changeAddress = _ref.changeAddress,
      dustThreshold = _ref.dustThreshold,
      baseFee = _ref.baseFee,
      floorBaseFee = _ref.floorBaseFee,
      dustOutputFee = _ref.dustOutputFee,
      skipUtxoSelection = _ref.skipUtxoSelection;

  if (outputs.length === 0) {
    return result.empty;
  }

  if (utxos.length === 0) {
    return {
      type: 'error',
      error: 'NOT-ENOUGH-FUNDS'
    };
  }

  var countMax = {
    exists: false,
    id: 0
  };

  try {
    countMax = request.getMax(outputs);
  } catch (e) {
    return {
      type: 'error',
      error: e.message
    };
  }

  var splitOutputs = request.splitByCompleteness(outputs);
  var csResult = {
    type: 'false'
  };

  try {
    csResult = coinselect.coinselect(utxos, outputs, height, feeRate, segwit, countMax.exists, countMax.id, dustThreshold, network, baseFee, floorBaseFee, dustOutputFee, skipUtxoSelection);
  } catch (e) {
    return {
      type: 'error',
      error: e.message
    };
  }

  if (csResult.type === 'false') {
    return {
      type: 'error',
      error: 'NOT-ENOUGH-FUNDS'
    };
  }

  if (splitOutputs.incomplete.length > 0) {
    return result.getNonfinalResult(csResult);
  }

  var resTransaction = transaction.createTransaction(utxos, csResult.result.inputs, splitOutputs.complete, csResult.result.outputs, segwit, inputAmounts, basePath, changeId, changeAddress, network);
  return result.getFinalResult(csResult, resTransaction);
}