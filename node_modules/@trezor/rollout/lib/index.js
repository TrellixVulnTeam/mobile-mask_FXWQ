"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBinary = exports.getInfo = void 0;
var releases_1 = require("./utils/releases");
var fetch_1 = require("./utils/fetch");
var score_1 = require("./utils/score");
var versionUtils = __importStar(require("./utils/version"));
var parse_1 = require("./utils/parse");
var modifyFirmware = function (_a) {
    var fw = _a.fw, features = _a.features;
    if (features.major_version === 2)
        return fw;
    if (versionUtils.isNewerOrEqual([features.major_version, features.minor_version, features.patch_version], [1, 8, 0])) {
        return fw.slice(256);
    }
    return fw;
};
var getChangelog = function (releases, features) {
    if (features.bootloader_mode) {
        if (features.firmware_present && features.major_version === 1) {
            return null;
        }
        if (features.firmware_present && features.major_version === 2) {
            return releases.filter(function (r) {
                return versionUtils.isNewer(r.version, [
                    features.fw_major,
                    features.fw_minor,
                    features.fw_patch,
                ]);
            });
        }
        return releases;
    }
    return releases.filter(function (r) {
        return versionUtils.isNewer(r.version, [
            features.major_version,
            features.minor_version,
            features.patch_version,
        ]);
    });
};
var isNewer = function (release, features) {
    if (features.major_version === 1 && features.bootloader_mode) {
        return null;
    }
    return versionUtils.isNewer(release.version, [
        features.major_version,
        features.minor_version,
        features.patch_version,
    ]);
};
var isRequired = function (changelog) {
    if (!changelog || !changelog.length)
        return null;
    return changelog.some(function (item) { return item.required; });
};
var isLatest = function (release, latest) {
    return versionUtils.isEqual(release.version, latest.version);
};
exports.getInfo = function (_a) {
    var features = _a.features, releases = _a.releases;
    var parsedFeatures = parse_1.parseFeatures(features);
    var parsedReleases = parse_1.parseReleases(releases);
    var score = 0;
    if (features.device_id) {
        score = score_1.getScore(features.device_id);
    }
    var bootloader_mode = parsedFeatures.bootloader_mode, major_version = parsedFeatures.major_version, minor_version = parsedFeatures.minor_version, patch_version = parsedFeatures.patch_version, fw_major = parsedFeatures.fw_major, fw_minor = parsedFeatures.fw_minor, fw_patch = parsedFeatures.fw_patch;
    var latest = parsedReleases[0];
    if (score) {
        parsedReleases = parsedReleases.filter(function (item) {
            if (!item.rollout)
                return true;
            return item.rollout >= score;
        });
    }
    if (major_version === 2 && bootloader_mode) {
        if (fw_major !== null && fw_minor !== null && fw_patch !== null) {
            parsedReleases = releases_1.filterSafeListByFirmware(parsedReleases, [
                fw_major,
                fw_minor,
                fw_patch,
            ]);
        }
        parsedReleases = releases_1.filterSafeListByBootloader(parsedReleases, [
            major_version,
            minor_version,
            patch_version,
        ]);
    }
    else if (major_version === 1 && bootloader_mode) {
        parsedReleases = releases_1.filterSafeListByBootloader(parsedReleases, [
            major_version,
            minor_version,
            patch_version,
        ]);
    }
    else {
        parsedReleases = releases_1.filterSafeListByFirmware(parsedReleases, [
            major_version,
            minor_version,
            patch_version,
        ]);
    }
    if (!parsedReleases.length) {
        return null;
    }
    var changelog = getChangelog(parsedReleases, parsedFeatures);
    return {
        changelog: changelog,
        release: parsedReleases[0],
        isLatest: isLatest(parsedReleases[0], latest),
        isRequired: isRequired(changelog),
        isNewer: isNewer(parsedReleases[0], parsedFeatures),
    };
};
exports.getBinary = function (_a) {
    var features = _a.features, releases = _a.releases, baseUrl = _a.baseUrl, baseUrlBeta = _a.baseUrlBeta, version = _a.version, btcOnly = _a.btcOnly, _b = _a.intermediary, intermediary = _b === void 0 ? false : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        var parsedFeatures, infoByBootloader, releaseByFirmware, fw_1, url, fw;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    parsedFeatures = parse_1.parseFeatures(features);
                    infoByBootloader = exports.getInfo({ features: features, releases: releases });
                    if (!!intermediary) return [3, 1];
                    releaseByFirmware = releases.find(function (r) { return versionUtils.isEqual(r.version, version); });
                    if (!infoByBootloader || !releaseByFirmware) {
                        throw new Error('no firmware found for this device');
                    }
                    return [3, 3];
                case 1: return [4, fetch_1.fetchFirmware(baseUrl + "/firmware/1/trezor-inter-1.8.0.bin")];
                case 2:
                    fw_1 = _c.sent();
                    return [2, { binary: modifyFirmware({ fw: fw_1, features: parsedFeatures }) }];
                case 3:
                    if (btcOnly && !releaseByFirmware.url_bitcoinonly) {
                        throw new Error("firmware version " + version + " does not exist in btc only variant");
                    }
                    if (!versionUtils.isEqual(releaseByFirmware.version, infoByBootloader.release.version)) {
                        throw new Error('version provided as param does not match firmware version found by features in bootloader');
                    }
                    url = releaseByFirmware.channel === 'beta' ? baseUrlBeta : baseUrl;
                    return [4, fetch_1.fetchFirmware(url + "/" + (btcOnly ? releaseByFirmware.url_bitcoinonly : releaseByFirmware.url))];
                case 4:
                    fw = _c.sent();
                    return [2, __assign(__assign({}, infoByBootloader), { binary: modifyFirmware({ fw: fw, features: parsedFeatures }) })];
            }
        });
    });
};
