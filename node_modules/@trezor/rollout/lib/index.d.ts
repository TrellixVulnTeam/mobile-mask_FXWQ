import { Release, Features } from './utils/parse';
interface GetInfoProps {
    features: Features;
    releases: Release[];
}
export declare const getInfo: ({ features, releases }: GetInfoProps) => {
    changelog: ({
        required: boolean;
        url: string;
        fingerprint: string;
        changelog: string;
        min_bridge_version: [number, number, number];
        version: [1, number, number] | [2, number, number];
        min_firmware_version: [1, number, number] | [2, number, number];
        min_bootloader_version: [1, number, number] | [2, number, number];
    } & {
        bootloader_version?: [1, number, number] | [2, number, number] | undefined;
        url_bitcoinonly?: string | undefined;
        fingerprint_bitcoinonly?: string | undefined;
        notes?: string | undefined;
        rollout?: number | undefined;
        channel?: string | undefined;
    })[] | null;
    release: {
        required: boolean;
        url: string;
        fingerprint: string;
        changelog: string;
        min_bridge_version: [number, number, number];
        version: [1, number, number] | [2, number, number];
        min_firmware_version: [1, number, number] | [2, number, number];
        min_bootloader_version: [1, number, number] | [2, number, number];
    } & {
        bootloader_version?: [1, number, number] | [2, number, number] | undefined;
        url_bitcoinonly?: string | undefined;
        fingerprint_bitcoinonly?: string | undefined;
        notes?: string | undefined;
        rollout?: number | undefined;
        channel?: string | undefined;
    };
    isLatest: boolean;
    isRequired: boolean | null;
    isNewer: boolean | null;
} | null;
interface GetBinaryProps extends GetInfoProps {
    baseUrl: string;
    baseUrlBeta: string;
    btcOnly?: boolean;
    version?: Release['version'];
    intermediary?: boolean;
}
export declare const getBinary: ({ features, releases, baseUrl, baseUrlBeta, version, btcOnly, intermediary, }: GetBinaryProps) => Promise<{
    binary: ArrayBuffer;
} | {
    binary: ArrayBuffer;
    changelog: ({
        required: boolean;
        url: string;
        fingerprint: string;
        changelog: string;
        min_bridge_version: [number, number, number];
        version: [1, number, number] | [2, number, number];
        min_firmware_version: [1, number, number] | [2, number, number];
        min_bootloader_version: [1, number, number] | [2, number, number];
    } & {
        bootloader_version?: [1, number, number] | [2, number, number] | undefined;
        url_bitcoinonly?: string | undefined;
        fingerprint_bitcoinonly?: string | undefined;
        notes?: string | undefined;
        rollout?: number | undefined;
        channel?: string | undefined;
    })[] | null;
    release: {
        required: boolean;
        url: string;
        fingerprint: string;
        changelog: string;
        min_bridge_version: [number, number, number];
        version: [1, number, number] | [2, number, number];
        min_firmware_version: [1, number, number] | [2, number, number];
        min_bootloader_version: [1, number, number] | [2, number, number];
    } & {
        bootloader_version?: [1, number, number] | [2, number, number] | undefined;
        url_bitcoinonly?: string | undefined;
        fingerprint_bitcoinonly?: string | undefined;
        notes?: string | undefined;
        rollout?: number | undefined;
        channel?: string | undefined;
    };
    isLatest: boolean;
    isRequired: boolean | null;
    isNewer: boolean | null;
}>;
export declare type FirmwareRelease = ReturnType<typeof getInfo>;
export declare type FirmwareBinary = ReturnType<typeof getBinary>;
export {};
