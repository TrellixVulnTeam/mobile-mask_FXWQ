"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterSafeListByFirmware = exports.filterSafeListByBootloader = void 0;
var versionUtils = __importStar(require("./version"));
exports.filterSafeListByBootloader = function (releasesList, bootloaderVersion) {
    return releasesList.filter(function (item) {
        return ((!item.min_bootloader_version ||
            versionUtils.isNewerOrEqual(bootloaderVersion, item.min_bootloader_version)) &&
            (!item.bootloader_version ||
                versionUtils.isNewerOrEqual(item.bootloader_version, bootloaderVersion)));
    });
};
exports.filterSafeListByFirmware = function (releasesList, firmwareVersion) {
    return releasesList.filter(function (item) {
        return versionUtils.isNewerOrEqual(firmwareVersion, item.min_firmware_version);
    });
};
