"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseReleases = exports.parseFeatures = void 0;
var runtypes_1 = require("runtypes");
exports.parseFeatures = function (extFeatures) {
    if (extFeatures.major_version === 2 && extFeatures.firmware_present === false) {
        return extFeatures;
    }
    if (extFeatures.major_version === 2 && extFeatures.bootloader_mode == null) {
        return extFeatures;
    }
    if (extFeatures.major_version === 2 && extFeatures.bootloader_mode === true) {
        return extFeatures;
    }
    if (extFeatures.major_version === 1 && extFeatures.firmware_present === false) {
        return extFeatures;
    }
    if (extFeatures.major_version === 1 && extFeatures.bootloader_mode === null) {
        return extFeatures;
    }
    if (extFeatures.major_version === 1 && extFeatures.bootloader_mode === true) {
        return extFeatures;
    }
    throw new Error('Features of unexpected shape provided to rollout');
};
var VersionArrayT2 = runtypes_1.Tuple(runtypes_1.Literal(2), runtypes_1.Number, runtypes_1.Number);
var VersionArrayT1 = runtypes_1.Tuple(runtypes_1.Literal(1), runtypes_1.Number, runtypes_1.Number);
var Release = runtypes_1.Record({
    required: runtypes_1.Boolean,
    url: runtypes_1.String,
    fingerprint: runtypes_1.String,
    changelog: runtypes_1.String,
    min_bridge_version: runtypes_1.Tuple(runtypes_1.Number, runtypes_1.Number, runtypes_1.Number),
    version: runtypes_1.Union(VersionArrayT1, VersionArrayT2),
    min_firmware_version: runtypes_1.Union(VersionArrayT1, VersionArrayT2),
    min_bootloader_version: runtypes_1.Union(VersionArrayT1, VersionArrayT2),
}).And(runtypes_1.Partial({
    bootloader_version: runtypes_1.Union(VersionArrayT1, VersionArrayT2),
    url_bitcoinonly: runtypes_1.String,
    fingerprint_bitcoinonly: runtypes_1.String,
    notes: runtypes_1.String,
    rollout: runtypes_1.Number,
    channel: runtypes_1.String,
}));
exports.parseReleases = function (extReleases) {
    try {
        extReleases.forEach(function (e) {
            Release.check(e);
        });
        return extReleases;
    }
    catch (err) {
        throw new Error("Release object in unexpected shape: " + err);
    }
};
