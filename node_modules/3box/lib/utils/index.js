"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');

var Multihash = require('multihashes');

var sha256 = require('js-sha256').sha256;

var ethers = require('ethers');

var HTTPError = function HTTPError(status, message) {
  var e = new Error(message);
  e.statusCode = status;
  return e;
};

var getMessageConsent = function getMessageConsent(did, timestamp) {
  var msg = 'Create a new 3Box profile' + '\n\n' + '- \n' + 'Your unique profile ID is ' + did;
  if (timestamp) msg += ' \n' + 'Timestamp: ' + timestamp;
  return msg;
};

var safeEthSend = function safeEthSend(ethereum, data, callback) {
  var send = (Boolean(ethereum.sendAsync) ? ethereum.sendAsync : ethereum.send).bind(ethereum);
  return new Promise(function (resolve, reject) {
    send(data, function (err, result) {
      if (err) reject(err);
      if (result.error) reject(result.error);
      resolve(result.result);
    });
  });
};

module.exports = {
  getMessageConsent: getMessageConsent,
  recoverPersonalSign: function () {
    var _recoverPersonalSign = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(msg, personalSig) {
      var msgParams;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(!msg || !personalSig)) {
                _context.next = 2;
                break;
              }

              throw new Error('recoverPersonalSign: missing arguments, msg and/or personalSig');

            case 2:
              msgParams = {
                data: msg,
                sig: personalSig
              };
              return _context.abrupt("return", ethers.utils.verifyMessage(msg, personalSig));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function recoverPersonalSign(_x, _x2) {
      return _recoverPersonalSign.apply(this, arguments);
    }

    return recoverPersonalSign;
  }(),
  openBoxConsent: function openBoxConsent(fromAddress, ethereum) {
    var text = 'This app wants to view and update your 3Box profile.';
    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');
    var params = [msg, fromAddress];
    var method = 'personal_sign';
    return safeEthSend(ethereum, {
      jsonrpc: '2.0',
      id: 0,
      method: method,
      params: params,
      fromAddress: fromAddress
    });
  },
  openSpaceConsent: function openSpaceConsent(fromAddress, ethereum, name) {
    var text = "Allow this app to open your ".concat(name, " space.");
    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');
    var params = [msg, fromAddress];
    var method = 'personal_sign';
    return safeEthSend(ethereum, {
      jsonrpc: '2.0',
      id: 0,
      method: method,
      params: params,
      fromAddress: fromAddress
    });
  },
  getLinkConsent: function () {
    var _getLinkConsent = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2(fromAddress, toDID, ethereum) {
      var timestamp, text, msg, params, method, sig;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              timestamp = Math.floor(new Date().getTime() / 1000);
              text = getMessageConsent(toDID, timestamp);
              msg = '0x' + Buffer.from(text, 'utf8').toString('hex');
              params = [msg, fromAddress];
              method = 'personal_sign';
              _context2.next = 7;
              return safeEthSend(ethereum, {
                jsonrpc: '2.0',
                id: 0,
                method: method,
                params: params,
                fromAddress: fromAddress
              });

            case 7:
              sig = _context2.sent;
              return _context2.abrupt("return", {
                msg: text,
                sig: sig,
                timestamp: timestamp
              });

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function getLinkConsent(_x3, _x4, _x5) {
      return _getLinkConsent.apply(this, arguments);
    }

    return getLinkConsent;
  }(),
  fetchJson: function () {
    var _fetchJson = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee3(url, body) {
      var opts, r;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (body) {
                opts = {
                  body: JSON.stringify(body),
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                };
              }

              _context3.next = 3;
              return fetch(url, opts);

            case 3:
              r = _context3.sent;

              if (!r.ok) {
                _context3.next = 8;
                break;
              }

              return _context3.abrupt("return", r.json());

            case 8:
              throw HTTPError(r.status, "Invalid response (".concat(r.status, ") for query at ").concat(url));

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function fetchJson(_x6, _x7) {
      return _fetchJson.apply(this, arguments);
    }

    return fetchJson;
  }(),
  fetchText: function () {
    var _fetchText = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee4(url, opts) {
      var r;
      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return fetch(url, opts);

            case 2:
              r = _context4.sent;

              if (!r.ok) {
                _context4.next = 7;
                break;
              }

              return _context4.abrupt("return", r.text());

            case 7:
              throw HTTPError(r.status, "Invalid response (".concat(r.status, ") for query at ").concat(url));

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function fetchText(_x8, _x9) {
      return _fetchText.apply(this, arguments);
    }

    return fetchText;
  }(),
  throwIfUndefined: function throwIfUndefined(arg, name) {
    if (arg === undefined || arg === null) {
      throw new Error("".concat(name, " is a required argument"));
    }
  },
  throwIfNotEqualLenArrays: function throwIfNotEqualLenArrays(arr1, arr2) {
    if (!Array.isArray(arr1) || !Array.isArray(arr2)) {
      throw new Error('One or more arguments are not an array');
    }

    if (arr1.length !== arr2.length) {
      throw new Error('Arrays must be of the same length');
    }
  },
  sha256Multihash: function sha256Multihash(str) {
    var digest = Buffer.from(sha256.digest(str));
    return Multihash.encode(digest, 'sha2-256').toString('hex');
  },
  sha256: sha256
};