"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var graphQLRequest = require('graphql-request').request;

var utils = require('./utils/index');

var verifier = require('./utils/verifier');

var _require = require('./utils/id'),
    isMuportDID = _require.isMuportDID;

var config = require('./config.js');

var GRAPHQL_SERVER_URL = config.graphql_server_url;
var PROFILE_SERVER_URL = config.profile_server_url;
var ADDRESS_SERVER_URL = config.address_server_url;

function getRootStoreAddress(_x) {
  return _getRootStoreAddress.apply(this, arguments);
}

function _getRootStoreAddress() {
  _getRootStoreAddress = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(identifier) {
    var serverUrl,
        res,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            serverUrl = _args.length > 1 && _args[1] !== undefined ? _args[1] : ADDRESS_SERVER_URL;
            _context.next = 3;
            return utils.fetchJson(serverUrl + '/odbAddress/' + identifier);

          case 3:
            res = _context.sent;
            return _context.abrupt("return", res.data.rootStoreAddress);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getRootStoreAddress.apply(this, arguments);
}

function listSpaces(_x2) {
  return _listSpaces.apply(this, arguments);
}

function _listSpaces() {
  _listSpaces = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(address) {
    var serverUrl,
        _args2 = arguments;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            serverUrl = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : PROFILE_SERVER_URL;
            _context2.prev = 1;

            if (!isMuportDID(address)) {
              _context2.next = 8;
              break;
            }

            _context2.next = 5;
            return utils.fetchJson(serverUrl + '/list-spaces?did=' + encodeURIComponent(address));

          case 5:
            return _context2.abrupt("return", _context2.sent);

          case 8:
            _context2.next = 10;
            return utils.fetchJson(serverUrl + '/list-spaces?address=' + encodeURIComponent(address));

          case 10:
            return _context2.abrupt("return", _context2.sent);

          case 11:
            _context2.next = 16;
            break;

          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](1);
            return _context2.abrupt("return", []);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 13]]);
  }));
  return _listSpaces.apply(this, arguments);
}

function getSpace(_x3, _x4) {
  return _getSpace.apply(this, arguments);
} // TODO consumes address now, could also give root DID to get space DID


function _getSpace() {
  _getSpace = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(address, name) {
    var serverUrl,
        _ref,
        metadata,
        blocklist,
        url,
        _args3 = arguments;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            serverUrl = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : PROFILE_SERVER_URL;
            _ref = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {}, metadata = _ref.metadata, blocklist = _ref.blocklist;

            if (!(blocklist && blocklist(address))) {
              _context3.next = 4;
              break;
            }

            throw new Error("user with ".concat(address, " is blocked"));

          case 4:
            url = "".concat(serverUrl, "/space");
            _context3.prev = 5;

            // Add first parameter: address or did
            if (isMuportDID(address)) {
              url = "".concat(url, "?did=").concat(encodeURIComponent(address));
            } else {
              url = "".concat(url, "?address=").concat(encodeURIComponent(address.toLowerCase()));
            } // Add name:


            url = "".concat(url, "&name=").concat(encodeURIComponent(name)); // Add metadata:

            if (metadata) {
              url = "".concat(url, "&metadata=").concat(encodeURIComponent(metadata));
            } // Query:
            // we await explicitly to make sure the error is catch'd in the correct scope


            _context3.next = 11;
            return utils.fetchJson(url);

          case 11:
            return _context3.abrupt("return", _context3.sent);

          case 14:
            _context3.prev = 14;
            _context3.t0 = _context3["catch"](5);
            return _context3.abrupt("return", {});

          case 17:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[5, 14]]);
  }));
  return _getSpace.apply(this, arguments);
}

function getSpaceDID(_x5, _x6) {
  return _getSpaceDID.apply(this, arguments);
}

function _getSpaceDID() {
  _getSpaceDID = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(address, space) {
    var opts,
        conf,
        _args4 = arguments;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
            _context4.next = 3;
            return getConfig(address, opts);

          case 3:
            conf = _context4.sent;

            if (!(!conf.spaces[space] || !conf.spaces[space].DID)) {
              _context4.next = 6;
              break;
            }

            throw new Error("Could not find appropriate DID for address ".concat(address));

          case 6:
            return _context4.abrupt("return", conf.spaces[space].DID);

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getSpaceDID.apply(this, arguments);
}

function getThread(_x7, _x8, _x9, _x10) {
  return _getThread.apply(this, arguments);
}

function _getThread() {
  _getThread = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(space, name, firstModerator, members) {
    var opts,
        serverUrl,
        url,
        _args5 = arguments;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            opts = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : {};
            serverUrl = opts.profileServer || PROFILE_SERVER_URL;

            if (!firstModerator.startsWith('0x')) {
              _context5.next = 6;
              break;
            }

            _context5.next = 5;
            return getSpaceDID(firstModerator, space, opts);

          case 5:
            firstModerator = _context5.sent;

          case 6:
            _context5.prev = 6;
            url = "".concat(serverUrl, "/thread?space=").concat(encodeURIComponent(space), "&name=").concat(encodeURIComponent(name));
            url += "&mod=".concat(encodeURIComponent(firstModerator), "&members=").concat(encodeURIComponent(members));
            _context5.next = 11;
            return utils.fetchJson(url);

          case 11:
            return _context5.abrupt("return", _context5.sent);

          case 14:
            _context5.prev = 14;
            _context5.t0 = _context5["catch"](6);
            throw new Error(_context5.t0);

          case 17:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[6, 14]]);
  }));
  return _getThread.apply(this, arguments);
}

function getThreadByAddress(_x11) {
  return _getThreadByAddress.apply(this, arguments);
}

function _getThreadByAddress() {
  _getThreadByAddress = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee6(address) {
    var opts,
        serverUrl,
        _args6 = arguments;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
            serverUrl = opts.profileServer || PROFILE_SERVER_URL;
            _context6.prev = 2;
            _context6.next = 5;
            return utils.fetchJson("".concat(serverUrl, "/thread?address=").concat(encodeURIComponent(address)));

          case 5:
            return _context6.abrupt("return", _context6.sent);

          case 8:
            _context6.prev = 8;
            _context6.t0 = _context6["catch"](2);
            throw new Error(_context6.t0);

          case 11:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[2, 8]]);
  }));
  return _getThreadByAddress.apply(this, arguments);
}

function getConfig(_x12) {
  return _getConfig.apply(this, arguments);
}

function _getConfig() {
  _getConfig = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee7(address) {
    var opts,
        serverUrl,
        _args7 = arguments;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            opts = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
            serverUrl = opts.profileServer || PROFILE_SERVER_URL;
            _context7.prev = 2;
            _context7.next = 5;
            return utils.fetchJson("".concat(serverUrl, "/config?address=").concat(encodeURIComponent(address)));

          case 5:
            return _context7.abrupt("return", _context7.sent);

          case 8:
            _context7.prev = 8;
            _context7.t0 = _context7["catch"](2);
            throw new Error(_context7.t0);

          case 11:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, null, [[2, 8]]);
  }));
  return _getConfig.apply(this, arguments);
}

function getProfile(_x13) {
  return _getProfile.apply(this, arguments);
}

function _getProfile() {
  _getProfile = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee8(address) {
    var serverUrl,
        _ref2,
        metadata,
        blocklist,
        url,
        _args8 = arguments;

    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            serverUrl = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : PROFILE_SERVER_URL;
            _ref2 = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {}, metadata = _ref2.metadata, blocklist = _ref2.blocklist;

            if (!(blocklist && blocklist(address))) {
              _context8.next = 4;
              break;
            }

            throw new Error("user with ".concat(address, " is blocked"));

          case 4:
            url = "".concat(serverUrl, "/profile");
            _context8.prev = 5;

            // Add first parameter: address or did
            if (isMuportDID(address)) {
              url = "".concat(url, "?did=").concat(encodeURIComponent(address));
            } else {
              url = "".concat(url, "?address=").concat(encodeURIComponent(address.toLowerCase()));
            } // Add metadata:


            if (metadata) {
              url = "".concat(url, "&metadata=").concat(encodeURIComponent(metadata));
            } // Query:
            // we await explicitly to make sure the error is catch'd in the correct scope


            _context8.next = 10;
            return utils.fetchJson(url);

          case 10:
            return _context8.abrupt("return", _context8.sent);

          case 13:
            _context8.prev = 13;
            _context8.t0 = _context8["catch"](5);
            return _context8.abrupt("return", {});

          case 16:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, null, [[5, 13]]);
  }));
  return _getProfile.apply(this, arguments);
}

function getProfiles(_x14) {
  return _getProfiles.apply(this, arguments);
}

function _getProfiles() {
  _getProfiles = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee9(addressArray) {
    var opts,
        req,
        url,
        _args9 = arguments;
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            opts = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
            opts = Object.assign({
              profileServer: PROFILE_SERVER_URL
            }, opts);
            req = {
              addressList: [],
              didList: [] // Split addresses on ethereum / dids

            };
            addressArray.forEach(function (address) {
              if (isMuportDID(address)) {
                req.didList.push(address);
              } else {
                req.addressList.push(address);
              }
            });
            url = "".concat(opts.profileServer, "/profileList");
            return _context9.abrupt("return", utils.fetchJson(url, req));

          case 6:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _getProfiles.apply(this, arguments);
}

function profileGraphQL(_x15) {
  return _profileGraphQL.apply(this, arguments);
}

function _profileGraphQL() {
  _profileGraphQL = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee10(query) {
    var opts,
        _args10 = arguments;
    return _regenerator["default"].wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            opts = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
            opts = Object.assign({
              graphqlServer: GRAPHQL_SERVER_URL
            }, opts);
            return _context10.abrupt("return", graphQLRequest(opts.graphqlServer, query));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _profileGraphQL.apply(this, arguments);
}

function getVerifiedAccounts(_x16) {
  return _getVerifiedAccounts.apply(this, arguments);
}

function _getVerifiedAccounts() {
  _getVerifiedAccounts = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee11(profile) {
    var verifs, did;
    return _regenerator["default"].wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            verifs = {};
            _context11.prev = 1;
            _context11.next = 4;
            return verifier.verifyDID(profile.proof_did);

          case 4:
            did = _context11.sent;
            verifs.did = did;

            if (!profile.proof_github) {
              _context11.next = 15;
              break;
            }

            _context11.prev = 7;
            _context11.next = 10;
            return verifier.verifyGithub(did, profile.proof_github);

          case 10:
            verifs.github = _context11.sent;
            _context11.next = 15;
            break;

          case 13:
            _context11.prev = 13;
            _context11.t0 = _context11["catch"](7);

          case 15:
            if (!profile.proof_twitter) {
              _context11.next = 24;
              break;
            }

            _context11.prev = 16;
            _context11.next = 19;
            return verifier.verifyTwitter(did, profile.proof_twitter);

          case 19:
            verifs.twitter = _context11.sent;
            _context11.next = 24;
            break;

          case 22:
            _context11.prev = 22;
            _context11.t1 = _context11["catch"](16);

          case 24:
            if (!profile.ethereum_proof) {
              _context11.next = 33;
              break;
            }

            _context11.prev = 25;
            _context11.next = 28;
            return verifier.verifyEthereum(profile.ethereum_proof, did);

          case 28:
            verifs.ethereum = _context11.sent;
            _context11.next = 33;
            break;

          case 31:
            _context11.prev = 31;
            _context11.t2 = _context11["catch"](25);

          case 33:
            _context11.next = 37;
            break;

          case 35:
            _context11.prev = 35;
            _context11.t3 = _context11["catch"](1);

          case 37:
            return _context11.abrupt("return", verifs);

          case 38:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11, null, [[1, 35], [7, 13], [16, 22], [25, 31]]);
  }));
  return _getVerifiedAccounts.apply(this, arguments);
}

module.exports = {
  profileGraphQL: profileGraphQL,
  getProfile: getProfile,
  getSpace: getSpace,
  listSpaces: listSpaces,
  getThread: getThread,
  getThreadByAddress: getThreadByAddress,
  getConfig: getConfig,
  getRootStoreAddress: getRootStoreAddress,
  getProfiles: getProfiles,
  getVerifiedAccounts: getVerifiedAccounts,
  getSpaceDID: getSpaceDID
};