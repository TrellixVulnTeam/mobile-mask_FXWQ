"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var EventEmitter = require('events');

var OrbitDB = require('orbit-db');

var Pubsub = require('orbit-db-pubsub');

var AccessControllers = require('orbit-db-access-controllers');

var _require = require('3box-orbitdb-plugins'),
    LegacyIPFS3BoxAccessController = _require.LegacyIPFS3BoxAccessController,
    ThreadAccessController = _require.ThreadAccessController,
    ModeratorAccessController = _require.ModeratorAccessController;

AccessControllers.addAccessController({
  AccessController: LegacyIPFS3BoxAccessController
});
AccessControllers.addAccessController({
  AccessController: ThreadAccessController
});
AccessControllers.addAccessController({
  AccessController: ModeratorAccessController
});
var PINNING_NODE = config.pinning_node;
var PINNING_ROOM = config.pinning_room;
var ORBITDB_OPTS = config.orbitdb_options;

var Replicator =
/*#__PURE__*/
function () {
  function Replicator(ipfs, opts) {
    var _this = this;

    (0, _classCallCheck2["default"])(this, Replicator);
    this.events = new EventEmitter();
    this.ipfs = ipfs;
    this.pinningNode = opts.pinningNode || PINNING_NODE;
    this.ipfs.swarm.connect(this.pinningNode, function () {});
    this._isSynced = {};
    this.hasPubsubMsgs = {};
    this.events.on('pinning-room-message', function (topic, data) {
      if (data.type === 'HAS_ENTRIES' && data.odbAddress) {
        odbAddress = data.odbAddress;
        _this.hasPubsubMsgs[odbAddress] = data;

        _this.events.emit("has-".concat(odbAddress), data);
      }
    });
  }

  (0, _createClass2["default"])(Replicator, [{
    key: "_init",
    value: function () {
      var _init2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(opts) {
        var _this2 = this;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = Pubsub;
                _context.t1 = this.ipfs;
                _context.next = 4;
                return this.ipfs.id();

              case 4:
                _context.t2 = _context.sent.id;
                this._pubsub = new _context.t0(_context.t1, _context.t2);
                _context.next = 8;
                return OrbitDB.createInstance(this.ipfs, {
                  directory: opts.orbitPath
                });

              case 8:
                this.orbitdb = _context.sent;

                this._pubsub.subscribe(PINNING_ROOM, function (topic, data) {
                  console.log('message', topic, data);

                  _this2.events.emit('pinning-room-message', topic, data);
                }, function (topic, peer) {
                  console.log('peer', topic, peer);

                  _this2.events.emit('pinning-room-peer', topic, peer);
                });

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _init(_x) {
        return _init2.apply(this, arguments);
      }

      return _init;
    }()
  }, {
    key: "start",
    value: function () {
      var _start = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(rootStoreAddress) {
        var _this3 = this;

        var opts,
            rootEntriesPromise,
            waitForSync,
            _args3 = arguments;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opts = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                rootEntriesPromise = this._getNumEntries(rootStoreAddress);

                this._publishDB(rootStoreAddress);

                _context3.next = 5;
                return this._orbitdb.feed(rootStoreAddress, _objectSpread({}, ORBITDB_OPTS, {
                  accessController: {
                    type: 'legacy-ipfs-3box',
                    skipManifest: true
                  }
                }));

              case 5:
                this.rootstore = _context3.sent;
                _context3.next = 8;
                return this.rootstore.load();

              case 8:
                waitForSync =
                /*#__PURE__*/
                function () {
                  var _ref = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee2() {
                    var numEntries;
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.next = 2;
                            return rootEntriesPromise;

                          case 2:
                            numEntries = _context2.sent;
                            _context2.next = 5;
                            return Replicator.syncDB(_this3.rootstore, numEntries);

                          case 5:
                            _this3.events.emit('sync-done-rootstore');

                          case 6:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function waitForSync() {
                    return _ref.apply(this, arguments);
                  };
                }();

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function start(_x2) {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "loadSubStores",
    value: function loadSubStores(_ref2) {
      var profile = _ref2.profile,
          allSpaces = _ref2.allSpaces;
      var subStoreEntries = this.listSubStores();
      subStoreEntries.map(function (entry) {
        var data = entry.payload.value;

        if (data.type === rootEntryTypes.SPACE && allSpaces) {
          // don't open db if the space entry is malformed
          if (!data.DID || !data.odbAddress) return;
          pinDID(data.DID);
        }

        if (data.odbAddress.includes('public') || data.odbAddress.includes('private')) {}
      });
    }
  }, {
    key: "listSubStores",
    value: function listSubStores() {
      var entries = this.rootstore.iterator({
        limit: -1
      }).collect().filter(function (e) {
        return Boolean(e.payload.value.odbAddress);
      });
      var uniqueEntries = entries.filter(function (e1, i, a) {
        return a.findIndex(function (e2) {
          return e2.payload.value.odbAddress === e1.payload.value.odbAddress;
        }) === i;
      });
      return uniqueEntries;
    }
  }, {
    key: "isSynced",
    value: function isSynced(space) {
      if (!space) {
        return;
      }
    }
  }, {
    key: "_getNumEntries",
    value: function () {
      var _getNumEntries2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(odbAddress) {
        var _this4 = this;

        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", new Promise(function (resolve, reject) {
                  var eventName = "has-".concat(odbAddress);

                  _this4.events.on(eventName, function (data) {
                    resolve(data.numEntries);

                    _this4.events.removeAllListeners(eventName);
                  });

                  if (_this4.hasPubsubMsgs[odbAddress]) {
                    resolve(_this4.hasPubsubMsgs[odbAddress].numEntries);

                    _this4.events.removeAllListeners(eventName);
                  }
                }));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function _getNumEntries(_x3) {
        return _getNumEntries2.apply(this, arguments);
      }

      return _getNumEntries;
    }()
  }, {
    key: "_publishDB",
    value: function () {
      var _publishDB2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(rootStoreAddress, did) {
        var _this5 = this;

        var pinningNodeJoined;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // make sure that the pinning node is in the pubsub room before publishing
                pinningNodeJoined = new Promise(function (resolve, reject) {
                  _this5.events.on('pinning-room-peer', function (topic, peer) {
                    if (peer === _this5.pinningNode.split('/').pop()) {
                      resolve();
                    }
                  });
                });
                _context5.next = 3;
                return this.ipfs.pubsub.peers(PINNING_ROOM);

              case 3:
                _context5.t0 = this.pinningNode;

                if (_context5.sent.includes(_context5.t0)) {
                  _context5.next = 7;
                  break;
                }

                _context5.next = 7;
                return pinningNodeJoined;

              case 7:
                this._pubsub.publish(PINNING_ROOM, {
                  type: 'PIN_DB',
                  odbAddress: rootStoreAddress,
                  did: did
                });

                this.events.removeAllListeners('pinning-room-peer');

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _publishDB(_x4, _x5) {
        return _publishDB2.apply(this, arguments);
      }

      return _publishDB;
    }()
  }], [{
    key: "createInstance",
    value: function () {
      var _createInstance = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(ipfs) {
        var opts,
            replicator,
            _args6 = arguments;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                replicator = new Replicator(ipfs, opts);
                _context6.next = 4;
                return replicator._init(opts);

              case 4:
                return _context6.abrupt("return", replicator);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function createInstance(_x6) {
        return _createInstance.apply(this, arguments);
      }

      return createInstance;
    }()
  }, {
    key: "syncDB",
    value: function () {
      var _syncDB = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7(dbInstance, numRemoteEntries) {
        var numEntriesDefined;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                numEntriesDefined = !(numRemoteEntries === null || numRemoteEntries === undefined);

                if (!(numEntriesDefined && numRemoteEntries <= dbInstance._oplog.values.length)) {
                  _context7.next = 3;
                  break;
                }

                return _context7.abrupt("return", Promise.resolve());

              case 3:
                _context7.next = 5;
                return new Promise(function (resolve, reject) {
                  if (!numRemoteEntries) {
                    setTimeout(function () {
                      dbInstance.events.removeAllListeners('replicated');
                      dbInstance.events.removeAllListeners('replicate.progress');
                      resolve();
                    }, 3000);
                  }

                  dbInstance.events.on('replicated', function () {
                    if (numRemoteEntries <= dbInstance._oplog.values.length) {
                      resolve();
                      dbInstance.events.removeAllListeners('replicated');
                      dbInstance.events.removeAllListeners('replicate.progress');
                    }
                  });
                });

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function syncDB(_x7, _x8) {
        return _syncDB.apply(this, arguments);
      }

      return syncDB;
    }()
  }]);
  return Replicator;
}();