"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var ThreeId = require('../index');

var testUtils = require('../../__tests__/testUtils');

var localstorage = require('store');

var _require = require('did-jwt'),
    verifyJWT = _require.verifyJWT;

var resolve = require('did-resolver')["default"];

var registerResolver = require('3id-resolver');

jest.mock('../../utils/index', function () {
  var sha256 = require('js-sha256').sha256;

  return {
    openBoxConsent: jest.fn(
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", '0x8726348762348723487238476238746827364872634876234876234');

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))),
    openSpaceConsent: jest.fn(
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2() {
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", '0x8ab87482987498387634985734987b9834598734597887070702535');

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))),
    sha256Multihash: jest.fn(function (str) {
      if (str === 'did:muport:Qmsdsdf87g329') return 'ab8c73d8f';
      return 'b932fe7ab';
    }),
    sha256: sha256
  };
});
var STORAGE_KEY = 'serialized3id_';

var clearLocalStorage3id = function clearLocalStorage3id(address) {
  localstorage.remove(STORAGE_KEY + address);
};

var ADDR_1 = '0x12345';
var ADDR_2 = '0xabcde';
var ADDR_3 = '0xlmnop';
var ADDR_1_STATE_1 = '{"managementAddress":"0x12345","seed":"0xbc95bb0aeb7e5c7a9519ef066d4b60a944373ba1163b0c962a043bebec1579ef33e0ef4f63c0888d7a8ec95df34ada58fb739b2a4d3b44362747e6b193db9af2","spaceSeeds":{}}';
var ADDR_1_STATE_2 = '{"managementAddress":"0x12345","seed":"0xbc95bb0aeb7e5c7a9519ef066d4b60a944373ba1163b0c962a043bebec1579ef33e0ef4f63c0888d7a8ec95df34ada58fb739b2a4d3b44362747e6b193db9af2","spaceSeeds":{"space1":"0xedfac8a7bcc52f33b88cfb9f310bc533f77800183beecfa49dcdf8d3b4b906502ec46533d9d7fb12eced9b04e0bdebd1c26872cf5fa759331e4c2f97ab95f450","space2":"0xedfac8a7bcc52f33b88cfb9f310bc533f77800183beecfa49dcdf8d3b4b906502ec46533d9d7fb12eced9b04e0bdebd1c26872cf5fa759331e4c2f97ab95f450"}}';
var ADDR_2_STATE = '{"managementAddress":"0xabcde","seed":"0xbc95bb0aeb7e5c7a9519ef066d4b60a944373ba1163b0c962a043bebec1579ef33e0ef4f63c0888d7a8ec95df34ada58fb739b2a4d3b44362747e6b193db9af2","spaceSeeds":{}}';
var ADDR_3_STATE_1 = '{"managementAddress":"0xlmnop","seed":"0xaedd3b597a14ad1c941ca535208fabd0b44a668dd0c8156f68a823ef8d713212d356731839a354ac5b781f4b986ff54aa2cadfa3551846c9e43bfa0122f3d55b","spaceSeeds":{}}';
var SPACE_1 = 'space1';
var SPACE_2 = 'space2';
var ETHEREUM = 'mockEthProvider';
var CONTENT_SIGNATURE_1 = '0xsomeContentSignature';
var NOT_CONTENT_SIGNATURE_1 = '0xanIncorrectSignature';

var mockedUtils = require('../../utils/index');

describe('3id', function () {
  var threeId, ipfs;
  beforeAll(
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return testUtils.initIPFS(6);

          case 2:
            ipfs = _context3.sent;
            registerResolver(ipfs);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  afterAll(
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4() {
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return testUtils.stopIPFS(ipfs, 6);

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  beforeEach(function () {
    mockedUtils.openBoxConsent.mockClear();
    mockedUtils.openSpaceConsent.mockClear();
  });
  describe('getIdFromEthAddress', function () {
    it('should create a new identity on first call',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee5() {
      var opts;
      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              opts = {
                consentCallback: jest.fn()
              };
              _context5.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_1, ETHEREUM, ipfs, opts);

            case 3:
              threeId = _context5.sent;
              expect(threeId.serializeState()).toEqual(ADDR_1_STATE_1);
              expect(threeId.DID).toMatchSnapshot();
              expect(opts.consentCallback).toHaveBeenCalledWith(true);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(1);
              _context5.t0 = expect;
              _context5.next = 11;
              return resolve(threeId.DID);

            case 11:
              _context5.t1 = _context5.sent;
              (0, _context5.t0)(_context5.t1).toMatchSnapshot();

            case 13:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    it('should create the same identity given the same address',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee6() {
      var threeId1, threeId2;
      return _regenerator["default"].wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return ThreeId.getIdFromEthAddress('0xabcde1', ETHEREUM, ipfs);

            case 2:
              threeId1 = _context6.sent;
              clearLocalStorage3id('0xabcde1');
              _context6.next = 6;
              return ThreeId.getIdFromEthAddress('0xABCDE1', ETHEREUM, ipfs);

            case 6:
              threeId2 = _context6.sent;
              expect(threeId1.serializeState()).toEqual(threeId2.serializeState());

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    it('should create a new identity for other eth addr',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee7() {
      var opts;
      return _regenerator["default"].wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              opts = {
                consentCallback: jest.fn()
              };
              _context7.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_2, ETHEREUM, ipfs, opts);

            case 3:
              threeId = _context7.sent;
              expect(threeId.serializeState()).toEqual(ADDR_2_STATE);
              expect(opts.consentCallback).toHaveBeenCalledWith(true);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(1);

            case 7:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
    it('should get identity from storage on subsequent calls to existing identity',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee8() {
      var opts;
      return _regenerator["default"].wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              opts = {
                consentCallback: jest.fn()
              };
              _context8.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_1, ETHEREUM, ipfs, opts);

            case 3:
              threeId = _context8.sent;
              expect(threeId.serializeState()).toEqual(ADDR_1_STATE_1);
              expect(opts.consentCallback).toHaveBeenCalledWith(false);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(0);

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    })));
    it('should create a new identity when passed a contentSignature',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee9() {
      var opts, contentSignatureThreeId;
      return _regenerator["default"].wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              opts = {
                consentCallback: jest.fn(),
                contentSignature: CONTENT_SIGNATURE_1
              };
              _context9.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_3, ETHEREUM, ipfs, opts);

            case 3:
              contentSignatureThreeId = _context9.sent;
              expect(contentSignatureThreeId.serializeState()).toEqual(ADDR_3_STATE_1);
              expect(contentSignatureThreeId.DID).toMatchSnapshot();
              expect(opts.consentCallback).toHaveBeenCalledWith(true);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(0);
              _context9.t0 = expect;
              _context9.next = 11;
              return resolve(contentSignatureThreeId.DID);

            case 11:
              _context9.t1 = _context9.sent;
              (0, _context9.t0)(_context9.t1).toMatchSnapshot();

            case 13:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    })));
    it('should create the same identity given the same address and contentSignature',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee10() {
      var opts, threeId1, threeId2;
      return _regenerator["default"].wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              // did is mocked, so compares serialized state
              opts = {
                contentSignature: CONTENT_SIGNATURE_1
              };
              _context10.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_3, ETHEREUM, ipfs, opts);

            case 3:
              threeId1 = _context10.sent;
              clearLocalStorage3id(ADDR_3);
              _context10.next = 7;
              return ThreeId.getIdFromEthAddress(ADDR_3, ETHEREUM, ipfs, opts);

            case 7:
              threeId2 = _context10.sent;
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(0);
              expect(threeId1.serializeState()).toEqual(threeId2.serializeState());

            case 10:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    })));
    it('should NOT create the same identity given the same address but a different contentSignature',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee11() {
      var opts, threeId1, threeId2;
      return _regenerator["default"].wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              // did is mocked, so compares serialized state
              opts = {
                contentSignature: NOT_CONTENT_SIGNATURE_1
              };
              _context11.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_3, ETHEREUM, ipfs, opts);

            case 3:
              threeId1 = _context11.sent;
              clearLocalStorage3id(ADDR_3);
              _context11.next = 7;
              return ThreeId.getIdFromEthAddress(ADDR_3, ETHEREUM, ipfs, opts);

            case 7:
              threeId2 = _context11.sent;
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(0);
              expect(threeId1.serializeState()).not.toEqual(threeId2.serializeState());

            case 10:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    })));
  });
  describe('keyring logic', function () {
    it('should get main keyring using rootStore/public/private name',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee12() {
      var fingerprint, kr;
      return _regenerator["default"].wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              fingerprint = threeId.muportFingerprint;
              kr = threeId.getKeyringBySpaceName(fingerprint + '.root');
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_1).seed);
              kr = threeId.getKeyringBySpaceName(fingerprint + '.public');
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_1).seed);
              kr = threeId.getKeyringBySpaceName(fingerprint + '.private');
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_1).seed);

            case 7:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    })));
    it('should init space keyrings correctly',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee13() {
      var requiredConsent, subDid;
      return _regenerator["default"].wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return threeId.initKeyringByName(SPACE_1);

            case 2:
              requiredConsent = _context13.sent;
              expect(requiredConsent).toEqual(true);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledTimes(1);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledWith(ADDR_1, ETHEREUM, SPACE_1);
              subDid = threeId.getSubDID(SPACE_1);
              expect(subDid).toMatchSnapshot();
              _context13.t0 = expect;
              _context13.next = 11;
              return resolve(subDid);

            case 11:
              _context13.t1 = _context13.sent;
              (0, _context13.t0)(_context13.t1).toMatchSnapshot();
              _context13.next = 15;
              return threeId.initKeyringByName(SPACE_2);

            case 15:
              requiredConsent = _context13.sent;
              expect(requiredConsent).toEqual(true);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledTimes(2);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledWith(ADDR_1, ETHEREUM, SPACE_2);
              subDid = threeId.getSubDID(SPACE_2);
              expect(subDid).toMatchSnapshot();
              _context13.t2 = expect;
              _context13.next = 24;
              return resolve(subDid);

            case 24:
              _context13.t3 = _context13.sent;
              (0, _context13.t2)(_context13.t3).toMatchSnapshot();
              _context13.next = 28;
              return threeId.initKeyringByName(SPACE_2);

            case 28:
              requiredConsent = _context13.sent;
              expect(requiredConsent).toEqual(false);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledTimes(2);

            case 31:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    })));
    it('should get space keyrings correctly',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee14() {
      var kr;
      return _regenerator["default"].wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              kr = threeId.getKeyringBySpaceName("3box.space.".concat(SPACE_1, ".keyvalue"));
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_2).spaceSeeds[SPACE_1]);
              kr = threeId.getKeyringBySpaceName("3box.space.".concat(SPACE_2, ".keyvalue"));
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_2).spaceSeeds[SPACE_2]);

            case 4:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    })));
    it('should get identity with spaces automatically initialized',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee15() {
      return _regenerator["default"].wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return ThreeId.getIdFromEthAddress(ADDR_1, ETHEREUM, ipfs);

            case 2:
              threeId = _context15.sent;
              expect(threeId.serializeState()).toEqual(ADDR_1_STATE_2);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(0);

            case 5:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    })));
  });
  describe('claim signing', function () {
    it('should sign jwts correctly with rootDID',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee16() {
      var jwt;
      return _regenerator["default"].wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return threeId.signJWT({
                iat: null,
                data: 'some data'
              }, {
                use3ID: true
              });

            case 2:
              jwt = _context16.sent;
              expect(verifyJWT(jwt)).resolves.toMatchSnapshot();

            case 4:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    })));
    it('should sign jwts correctly with subDID',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee17() {
      var jwt;
      return _regenerator["default"].wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return threeId.signJWT({
                iat: null,
                data: 'some data'
              }, {
                space: SPACE_1
              });

            case 2:
              jwt = _context17.sent;
              expect(verifyJWT(jwt, {
                auth: true
              })).resolves.toMatchSnapshot();

            case 4:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    })));
  });
  describe('login/out logic', function () {
    it('should be logged in',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee18() {
      return _regenerator["default"].wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              expect(ThreeId.isLoggedIn(ADDR_1)).toEqual(true);

            case 1:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    })));
    it('should log out correctly',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee19() {
      return _regenerator["default"].wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              threeId.logout();
              expect(ThreeId.isLoggedIn(ADDR_1)).toEqual(false);

            case 2:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    })));
  });
});