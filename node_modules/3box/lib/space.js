"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var KeyValueStore = require('./keyValueStore');

var Thread = require('./thread');

var _require = require('./utils'),
    sha256Multihash = _require.sha256Multihash,
    throwIfUndefined = _require.throwIfUndefined,
    throwIfNotEqualLenArrays = _require.throwIfNotEqualLenArrays;

var OrbitDBAddress = require('orbit-db/src/orbit-db-address');

var ENC_BLOCK_SIZE = 24;

var nameToSpaceName = function nameToSpaceName(name) {
  return "3box.space.".concat(name, ".keyvalue");
};

var namesTothreadName = function namesTothreadName(spaceName, threadName) {
  return "3box.thread.".concat(spaceName, ".").concat(threadName);
};

var Space =
/*#__PURE__*/
function () {
  /**
   * Please use **box.openSpace** to get the instance of this class
   */
  function Space(name, threeId, orbitdb, rootStore, ensureConnected) {
    (0, _classCallCheck2["default"])(this, Space);
    this._name = name;
    this._3id = threeId;
    this._ensureConnected = ensureConnected;
    this._store = new KeyValueStore(orbitdb, nameToSpaceName(this._name), this._ensureConnected, this._3id);
    this._orbitdb = orbitdb;
    this._activeThreads = {};
    this._rootStore = rootStore;
    /**
     * @property {KeyValueStore} public         access the profile store of the space
     */

    this["public"] = null;
    /**
     * @property {KeyValueStore} private        access the private store of the space
     */

    this["private"] = null;
  }
  /**
   * @property {String} DID        the did of the user in this space
   */


  (0, _createClass2["default"])(Space, [{
    key: "open",
    value: function () {
      var _open = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var _this = this;

        var opts,
            consentNeeded,
            spaceAddress,
            entries,
            entry,
            hasNumEntries,
            numEntries,
            syncSpace,
            _args2 = arguments;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};

                if (this._store._db) {
                  _context2.next = 29;
                  break;
                }

                _context2.next = 4;
                return this._3id.initKeyringByName(this._name);

              case 4:
                consentNeeded = _context2.sent;
                if (opts.consentCallback) opts.consentCallback(consentNeeded, this._name);
                _context2.next = 8;
                return this._store._load();

              case 8:
                spaceAddress = _context2.sent;
                _context2.next = 11;
                return this._rootStore.iterator({
                  limit: -1
                }).collect();

              case 11:
                entries = _context2.sent;
                entry = entries.find(function (entry) {
                  return entry.payload.value.odbAddress && entry.payload.value.odbAddress.indexOf(nameToSpaceName(_this._name)) !== -1;
                });

                if (entry) {
                  _context2.next = 18;
                  break;
                }

                _context2.next = 16;
                return this._rootStore.add({
                  type: 'space',
                  DID: this.DID,
                  odbAddress: spaceAddress
                });

              case 16:
                _context2.next = 23;
                break;

              case 18:
                if (entry.payload.value.type) {
                  _context2.next = 23;
                  break;
                }

                _context2.next = 21;
                return this._rootStore.del(entry.hash);

              case 21:
                _context2.next = 23;
                return this._rootStore.add({
                  type: 'space',
                  DID: this.DID,
                  odbAddress: spaceAddress
                });

              case 23:
                hasNumEntries = opts.numEntriesMessages && opts.numEntriesMessages[spaceAddress];
                numEntries = hasNumEntries ? opts.numEntriesMessages[spaceAddress].numEntries : undefined;

                syncSpace =
                /*#__PURE__*/
                function () {
                  var _ref = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee() {
                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return _this._store._sync(numEntries);

                          case 2:
                            if (opts.onSyncDone) opts.onSyncDone();

                          case 3:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function syncSpace() {
                    return _ref.apply(this, arguments);
                  };
                }();

                this._syncSpacePromise = syncSpace();
                this["public"] = publicStoreReducer(this._store);
                this["private"] = privateStoreReducer(this._store, this._3id.getKeyringBySpaceName(nameToSpaceName(this._name)));

              case 29:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function open() {
        return _open.apply(this, arguments);
      }

      return open;
    }()
    /**
     * Join a thread. Use this to start receiving updates from, and to post in threads
     *
     * @param     {String}    name                    The name of the thread
     * @param     {Object}    opts                    Optional parameters
     * @param     {String}    opts.firstModerator     DID of first moderator of a thread, by default, user is first moderator
     * @param     {Boolean}   opts.members            join a members only thread, which only members can post in, defaults to open thread
     * @param     {Boolean}   opts.noAutoSub          Disable auto subscription to the thread when posting to it (default false)
     *
     * @return    {Thread}                            An instance of the thread class for the joined thread
     */

  }, {
    key: "joinThread",
    value: function () {
      var _joinThread = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(name) {
        var opts,
            subscribeFn,
            thread,
            address,
            _args3 = arguments;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opts = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                subscribeFn = opts.noAutoSub ? function () {} : this.subscribeThread.bind(this);
                if (!opts.firstModerator) opts.firstModerator = this._3id.getSubDID(this._name);
                thread = new Thread(this._orbitdb, namesTothreadName(this._name, name), this._3id, opts.members, opts.firstModerator, subscribeFn, this._ensureConnected);
                _context3.next = 6;
                return thread._getThreadAddress();

              case 6:
                address = _context3.sent;

                if (!this._activeThreads[address]) {
                  _context3.next = 9;
                  break;
                }

                return _context3.abrupt("return", this._activeThreads[address]);

              case 9:
                _context3.next = 11;
                return thread._load();

              case 11:
                this._activeThreads[address] = thread;
                return _context3.abrupt("return", thread);

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function joinThread(_x) {
        return _joinThread.apply(this, arguments);
      }

      return joinThread;
    }()
    /**
     * Join a thread by full thread address. Use this to start receiving updates from, and to post in threads
     *
     * @param     {String}    address                 The full address of the thread
     * @param     {Object}    opts                    Optional parameters
     * @param     {Boolean}   opts.noAutoSub          Disable auto subscription to the thread when posting to it (default false)
     *
     * @return    {Thread}                            An instance of the thread class for the joined thread
     */

  }, {
    key: "joinThreadByAddress",
    value: function () {
      var _joinThreadByAddress = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(address) {
        var opts,
            threadSpace,
            threadName,
            subscribeFn,
            thread,
            _args4 = arguments;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                opts = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};

                if (OrbitDBAddress.isValid(address)) {
                  _context4.next = 3;
                  break;
                }

                throw new Error('joinThreadByAddress: valid orbitdb address required');

              case 3:
                threadSpace = address.split('.')[2];
                threadName = address.split('.')[3];

                if (!(threadSpace !== this._name)) {
                  _context4.next = 7;
                  break;
                }

                throw new Error('joinThreadByAddress: attempting to open thread from different space, must open within same space');

              case 7:
                if (!this._activeThreads[address]) {
                  _context4.next = 9;
                  break;
                }

                return _context4.abrupt("return", this._activeThreads[address]);

              case 9:
                subscribeFn = opts.noAutoSub ? function () {} : this.subscribeThread.bind(this);
                thread = new Thread(this._orbitdb, namesTothreadName(this._name, threadName), this._3id, opts.members, opts.firstModerator, subscribeFn, this._ensureConnected);
                _context4.next = 13;
                return thread._load(address);

              case 13:
                this._activeThreads[address] = thread;
                return _context4.abrupt("return", thread);

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function joinThreadByAddress(_x2) {
        return _joinThreadByAddress.apply(this, arguments);
      }

      return joinThreadByAddress;
    }()
    /**
     * Subscribe to the given thread, if not already subscribed
     *
     * @param     {String}    address                The address of the thread
     * @param     {Object}    config                configuration and thread meta data
     * @param     {String}    opts.name             Name of thread
     * @param     {String}    opts.firstModerator   DID of the first moderator
     * @param     {String}    opts.members          Boolean string, true if a members only thread
     */

  }, {
    key: "subscribeThread",
    value: function () {
      var _subscribeThread = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(address) {
        var config,
            threadKey,
            _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                config = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};

                if (OrbitDBAddress.isValid(address)) {
                  _context5.next = 3;
                  break;
                }

                throw new Error('subscribeThread: must subscribe to valid thread/orbitdb address');

              case 3:
                threadKey = "thread-".concat(address);
                _context5.next = 6;
                return this._syncSpacePromise;

              case 6:
                _context5.next = 8;
                return this["public"].get(threadKey);

              case 8:
                if (_context5.sent) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 11;
                return this["public"].set(threadKey, Object.assign({}, config, {
                  address: address
                }));

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function subscribeThread(_x3) {
        return _subscribeThread.apply(this, arguments);
      }

      return subscribeThread;
    }()
    /**
     * Unsubscribe from the given thread, if subscribed
     *
     * @param     {String}    address     The address of the thread
     */

  }, {
    key: "unsubscribeThread",
    value: function () {
      var _unsubscribeThread = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(address) {
        var threadKey;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                threadKey = "thread-".concat(address);
                _context6.next = 3;
                return this["public"].get(threadKey);

              case 3:
                if (!_context6.sent) {
                  _context6.next = 6;
                  break;
                }

                _context6.next = 6;
                return this["public"].remove(threadKey);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function unsubscribeThread(_x4) {
        return _unsubscribeThread.apply(this, arguments);
      }

      return unsubscribeThread;
    }()
    /**
     * Get a list of all the threads subscribed to in this space
     *
     * @return    {Array<Objects>}    A list of thread objects as { address, firstModerator, members, name}
     */

  }, {
    key: "subscribedThreads",
    value: function () {
      var _subscribedThreads = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7() {
        var allEntries;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this["public"].all();

              case 2:
                allEntries = _context7.sent;
                return _context7.abrupt("return", Object.keys(allEntries).reduce(function (threads, key) {
                  if (key.startsWith('thread')) {
                    // ignores experimental threads (v1)
                    var address = key.split('thread-')[1];

                    if (OrbitDBAddress.isValid(address)) {
                      threads.push(allEntries[key]);
                    }
                  }

                  return threads;
                }, []));

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function subscribedThreads() {
        return _subscribedThreads.apply(this, arguments);
      }

      return subscribedThreads;
    }()
  }, {
    key: "DID",
    get: function get() {
      return this._3id.getSubDID(this._name);
    }
  }]);
  return Space;
}();

module.exports = Space;

var publicStoreReducer = function publicStoreReducer(store) {
  var PREFIX = 'pub_';
  return {
    get: function () {
      var _get = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee8(key) {
        var opts,
            _args8 = arguments;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                opts = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                return _context8.abrupt("return", store.get(PREFIX + key, opts));

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function get(_x5) {
        return _get.apply(this, arguments);
      }

      return get;
    }(),
    getMetadata: function () {
      var _getMetadata = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee9(key) {
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt("return", store.getMetadata(PREFIX + key));

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function getMetadata(_x6) {
        return _getMetadata.apply(this, arguments);
      }

      return getMetadata;
    }(),
    set: function () {
      var _set = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee10(key, value) {
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                throwIfUndefined(key, 'key');
                return _context10.abrupt("return", store.set(PREFIX + key, value));

              case 2:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function set(_x7, _x8) {
        return _set.apply(this, arguments);
      }

      return set;
    }(),
    setMultiple: function () {
      var _setMultiple = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee11(keys, values) {
        var prefixedKeys;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                throwIfNotEqualLenArrays(keys, values);
                prefixedKeys = keys.map(function (key) {
                  return PREFIX + key;
                });
                return _context11.abrupt("return", store.setMultiple(prefixedKeys, values));

              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function setMultiple(_x9, _x10) {
        return _setMultiple.apply(this, arguments);
      }

      return setMultiple;
    }(),
    remove: function () {
      var _remove = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee12(key) {
        return _regenerator["default"].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                throwIfUndefined(key, 'key');
                return _context12.abrupt("return", store.remove(PREFIX + key));

              case 2:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      function remove(_x11) {
        return _remove.apply(this, arguments);
      }

      return remove;
    }(),

    get log() {
      return store.log.reduce(function (newLog, entry) {
        if (entry.key.startsWith(PREFIX)) {
          entry.key = entry.key.slice(4);
          newLog.push(entry);
        }

        return newLog;
      }, []);
    },

    all: function () {
      var _all = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee13(opts) {
        var entries;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return store.all(opts);

              case 2:
                entries = _context13.sent;
                return _context13.abrupt("return", Object.keys(entries).reduce(function (newAll, key) {
                  if (key.startsWith(PREFIX)) {
                    newAll[key.slice(4)] = entries[key];
                  }

                  return newAll;
                }, {}));

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function all(_x12) {
        return _all.apply(this, arguments);
      }

      return all;
    }()
  };
};

var privateStoreReducer = function privateStoreReducer(store, keyring) {
  var PREFIX = 'priv_';
  var SALT = keyring.getDBSalt();

  var dbKey = function dbKey(key) {
    throwIfUndefined(key, 'key');
    return PREFIX + sha256Multihash(SALT + key);
  };

  var pad = function pad(val) {
    var blockSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ENC_BLOCK_SIZE;
    var blockDiff = (blockSize - val.length % blockSize) % blockSize;
    return "".concat(val).concat('\0'.repeat(blockDiff));
  };

  var unpad = function unpad(padded) {
    return padded.replace(/\0+$/, '');
  };

  var encryptEntry = function encryptEntry(entry) {
    return keyring.symEncrypt(pad(JSON.stringify(entry)));
  };

  var decryptEntry = function decryptEntry(_ref2) {
    var ciphertext = _ref2.ciphertext,
        nonce = _ref2.nonce;
    return JSON.parse(unpad(keyring.symDecrypt(ciphertext, nonce)));
  };

  return {
    get: function () {
      var _get2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee14(key) {
        var opts,
            entry,
            _args14 = arguments;
        return _regenerator["default"].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                opts = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};
                _context14.next = 3;
                return store.get(dbKey(key), opts);

              case 3:
                entry = _context14.sent;

                if (entry) {
                  _context14.next = 6;
                  break;
                }

                return _context14.abrupt("return", null);

              case 6:
                if (!opts.metadata) {
                  _context14.next = 8;
                  break;
                }

                return _context14.abrupt("return", _objectSpread({}, entry, {
                  value: decryptEntry(entry.value).value
                }));

              case 8:
                return _context14.abrupt("return", decryptEntry(entry).value);

              case 9:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function get(_x13) {
        return _get2.apply(this, arguments);
      }

      return get;
    }(),
    getMetadata: function () {
      var _getMetadata2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee15(key) {
        return _regenerator["default"].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                return _context15.abrupt("return", store.getMetadata(dbKey(key)));

              case 1:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      function getMetadata(_x14) {
        return _getMetadata2.apply(this, arguments);
      }

      return getMetadata;
    }(),
    set: function () {
      var _set2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee16(key, value) {
        return _regenerator["default"].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt("return", store.set(dbKey(key), encryptEntry({
                  key: key,
                  value: value
                })));

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function set(_x15, _x16) {
        return _set2.apply(this, arguments);
      }

      return set;
    }(),
    setMultiple: function () {
      var _setMultiple2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee17(keys, values) {
        var dbKeys, encryptedEntries;
        return _regenerator["default"].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                throwIfNotEqualLenArrays(keys, values);
                dbKeys = keys.map(dbKey);
                encryptedEntries = values.map(function (value, index) {
                  return encryptEntry({
                    key: keys[index],
                    value: value
                  });
                });
                return _context17.abrupt("return", store.setMultiple(dbKeys, encryptedEntries));

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      function setMultiple(_x17, _x18) {
        return _setMultiple2.apply(this, arguments);
      }

      return setMultiple;
    }(),
    remove: function () {
      var _remove2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee18(key) {
        return _regenerator["default"].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                return _context18.abrupt("return", store.remove(dbKey(key)));

              case 1:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function remove(_x19) {
        return _remove2.apply(this, arguments);
      }

      return remove;
    }(),

    get log() {
      return store.log.reduce(function (newLog, entry) {
        if (entry.key.startsWith(PREFIX)) {
          var decEntry = decryptEntry(entry.value);
          entry.key = decEntry.key;
          entry.value = decEntry.value;
          newLog.push(entry);
        }

        return newLog;
      }, []);
    },

    all: function () {
      var _all2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee19() {
        var opts,
            entries,
            _args19 = arguments;
        return _regenerator["default"].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                opts = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};
                _context19.next = 3;
                return store.all(opts);

              case 3:
                entries = _context19.sent;
                return _context19.abrupt("return", Object.keys(entries).reduce(function (newAll, key) {
                  if (key.startsWith(PREFIX)) {
                    var entry = entries[key];

                    if (opts.metadata) {
                      var decEntry = decryptEntry(entry.value);
                      newAll[decEntry.key] = _objectSpread({}, entry, {
                        value: decEntry.value
                      });
                    } else {
                      var _decEntry = decryptEntry(entry);

                      newAll[_decEntry.key] = _decEntry.value;
                    }
                  }

                  return newAll;
                }, {}));

              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      function all() {
        return _all2.apply(this, arguments);
      }

      return all;
    }()
  };
};